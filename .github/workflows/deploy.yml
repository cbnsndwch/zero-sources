name: Build and Deploy to Docker Swarm

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/zrocket-api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/zrocket-frontend

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/zchat-api/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            frontend:
              - 'apps/zchat/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'

  build-api:
    needs: changes
    if: needs.changes.outputs.api == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build libraries
        run: pnpm build:libs

      - name: Build discriminated schema
        run: |
          mkdir -p .docker/swarm/schema
          cat > build-schema.mjs << 'EOF'
          import { schema } from './libs/zchat-zrocket/dist/schema/index.js';
          import { writeFileSync } from 'fs';
          writeFileSync(
            '.docker/swarm/schema/discriminated-schema.json', 
            JSON.stringify(schema, null, 2)
          );
          console.log('✅ Schema built successfully');
          EOF
          node build-schema.mjs
          rm build-schema.mjs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/zchat-api/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/arm64

  build-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build libraries
        run: pnpm build:libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/zchat/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/arm64

  # deploy:
  #   needs: [changes, build-api, build-frontend]
  #   if: always() && (needs.build-api.result == 'success' || needs.build-frontend.result == 'success' || github.event.inputs.force_deploy == 'true')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Trigger Portainer stack redeploy
  #       if: github.ref == 'refs/heads/main' && (secrets.PORTAINER_WEBHOOK_URL != '' && secrets.PORTAINER_WEBHOOK_TOKEN != '')
  #       run: |
  #         curl -X POST \
  #           -H "Content-Type: application/json" \
  #           -H "Authorization: Bearer ${{ secrets.PORTAINER_WEBHOOK_TOKEN }}" \
  #           -d '{"branch": "main", "force": true}' \
  #           "${{ secrets.PORTAINER_WEBHOOK_URL }}"

  #     - name: Deployment status
  #       run: |
  #         echo "✅ Deployment workflow completed"
  #         if [[ "${{ needs.build-api.result }}" == "success" ]]; then
  #           echo "🐳 API Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest"
  #         fi
  #         if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
  #           echo "🌐 Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
  #         fi
  #         if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #           echo "📊 Production stack deployment triggered via Portainer webhook"
  #         else
  #           echo "📋 Development build completed - no deployment triggered"
  #         fi
  # 
  # build-status:
  #   needs: [changes, build-api, build-frontend]
  #   if: always() && (needs.build-api.result == 'success' || needs.build-frontend.result == 'success' || github.event.inputs.force_deploy == 'true')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Build status summary
  #       run: |
  #         echo "✅ Build workflow completed"
  #         if [[ "${{ needs.build-api.result }}" == "success" ]]; then
  #           echo "🐳 API Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest"
  #         fi
  #         if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
  #           echo "🌐 Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
  #         fi
  #         echo "📋 Images built successfully - deployment disabled by design"